// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    

    // 由于Memory0-16383是RAM16K，16384-24575是Screen，25746是Keyboard
    // 2^14 = 16384, 2^14 + 2^13 = 24576
    // 我们便根据Address第十三位和第十四位（从右往左）来判断
    // 利用DMux4Way sel = 0 0 , a = in , b = 0 , c = 0 , d = 0
    //              sel = 0 1 , a = 0 , b = in , c = 0 , d = 0
    //              sel = 1 1 , a = 0 , b = 0 , c = in , d = 0
    //              sel = 1 1 , a = 0 , b = 0 , c = 0 , d = in
    // 由于不管是0 0 还是 0 1 都小于 16384 所以 a = b = loadRAM
    DMux4Way(in=load, sel=address[13..14], a=loadRAM1, b=loadRAM2, c=loadSCREEN, d=loadKEYBOARD);
    
    //由于a和b是相同的，我们用OR变为一个单位
    Or(a=loadRAM1, b=loadRAM2, out=loadRAM);
    
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    Screen(in=in, load=loadSCREEN, address=address[0..12], out=outSCREEN);
    Keyboard(out=outKEYBOARD);

    //三个组件都会产生OUT，我们用Dmux4Way的反操作来输出三个组件产生的out就可以了
    Mux4Way16(a=outRAM, b=outRAM, c=outSCREEN, d=outKEYBOARD, sel=address[13..14], out=out);
    
}